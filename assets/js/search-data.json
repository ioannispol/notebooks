{
  
    
        "post0": {
            "title": "Python Decision Tree Algorithm",
            "content": "What is a decision tree . Classification tasks using Decision Trees . The dataset . The Algorithm breakdown . The Gini Index | The Split | Building the tree | Generate Predictions | Apply to the case study | . The Gini Index . The Gini Index, aslo reffered as the Gini Impurity, is calculated by subtracting the sumation of the probabilities of each class in the dataset . $$Gini = sum_{i=1}^{C} (p_i) * (1 - p_i)$$ . Where $p$ is the probability of each class $C$ . Gini index can be discribed as the cost function of the Classification and Regression Trees (CART) at the split node. The Gini Index estimates how good a split is by taking into account how mixed the classes are at the split node. Gini score of $0$ results to a perfect separation where a Gini score of $50/50$ results in an equal distribution of $0.5$ for each class. . Gini Example . Supose we have 2 classes of data with 2 rows in class. For a perfect split of $0$ we need the data inth first or the second row to belong either in the first or the secind class. First we need to calculate the ratio between the classes in each group. . ratio = mumber_of(class) / number_of(rows) . So the Gini Index will be: . gini_index = sum(ratio * (1 - ratio)) . For the Gini Index (GI) to have correct output need to introduce the size of each group relave to the entire samples in the parent node . So, the GI will be: . gini_index = sum(ratio * (1 - ratio)) * (size_of_group/total_samples) . import matplotlib.pyplot as plt import pandas as pd import altair as alt . . def gini_index(groups, classes): # count the samples at split node n_instances = float(sum([len(group) for group in groups])) gini = 0.0 for group in groups: size = float(len(group)) # prevent zero division if size == 0: continue score = 0.0 # group score based on the score of each class for class_val in classes: p = [row[-1] for row in group].count(class_val) / size score += p * p # apply the formula gini += (1.0 - score) * (size / n_instances) return gini . . # test the gini function groups1 = [ [[1, 1], [1, 0]], [[1, 1], [1, 0]] ] groups2 = [ [[1, 0], [1, 0]], [[1, 1], [1, 1]] ] classes = [0,1] . . print(gini_index(groups1, classes)) print(gini_index(groups2, classes)) . 0.5 0.0 . . Create the splite node and the dataset . The split node is composed by a value and an attribute in the dataset . Splitting the dataset means to . loop over the rows in the dataset | check if the attributes are below or above the split value | append the values to the left or the right group | . def test_split(index, value, dataset): left, right = list(), list() for row in dataset: if row[index] &lt; value: left.append(row) else: right.append(row) return left, right . . # Select the best split point for a dataset def get_split(dataset): class_values = list(set(row[-1] for row in dataset)) b_index, b_value, b_score, b_groups = 999, 999, 999, None for index in range(len(dataset[0])-1): for row in dataset: groups = test_split(index, row[index], dataset) gini = gini_index(groups, class_values) if gini &lt; b_score: b_index, b_value, b_score, b_groups = index, row[index], gini, groups return {&#39;index&#39;:b_index, &#39;value&#39;:b_value, &#39;groups&#39;:b_groups} . . dataset = [[2.771244718,1.784783929,0], [1.728571309,1.169761413,0], [3.678319846,2.81281357,0], [3.961043357,2.61995032,0], [2.999208922,2.209014212,0], [7.497545867,3.162953546,1], [9.00220326,3.339047188,1], [7.444542326,0.476683375,1], [10.12493903,3.234550982,1], [6.642287351,3.319983761,1], [6.642287351,3.319983761,1]] dataset[7][1] . . 0.476683375 . x1, x2, y = list(), list(), list() for x_val1, x_val2, y_val in dataset: x1.append(x_val1) x2.append(x_val2) y.append(y_val) print(x1) print(&quot;==================&quot;) print(x2) print(&quot;==================&quot;) print(y) . . [2.771244718, 1.728571309, 3.678319846, 3.961043357, 2.999208922, 7.497545867, 9.00220326, 7.444542326, 10.12493903, 6.642287351, 6.642287351] ================== [1.784783929, 1.169761413, 2.81281357, 2.61995032, 2.209014212, 3.162953546, 3.339047188, 0.476683375, 3.234550982, 3.319983761, 3.319983761] ================== [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1] . colors = {0:&#39;blue&#39;, 1:&#39;red&#39;} color_ls = [colors[i] for i in y] with plt.ion(): plt.scatter(x1, x2, c=color_ls) plt.legend([&#39;Class 0&#39;, &#39;Class 1&#39;]) plt.axis() plt.show() . class_values = list(set(row[-1] for row in dataset)) class_values . [0, 1] . split = get_split(dataset) print(&#39;Split: [X%d &lt; %.3f]&#39; % ((split[&#39;index&#39;]+1), split[&#39;value&#39;])) . Split: [X1 &lt; 6.642] . Create the Tree . To build the tree involves the following steps . Need to have terminal nodes | Have Recursive splitting | and finally build the tree | . def terminal_node(group): outcomes = [row[-1] for row in group] return max(set(outcomes), key=outcomes.count) . def split(node, max_depth, min_size, depth): left, right = node[&#39;groups&#39;] del(node[&#39;groups&#39;]) # check for a no split if not left or not right: node[&#39;left&#39;] = node[&#39;right&#39;] = terminal_node(left + right) return # check for max depth if depth &gt;= max_depth: node[&#39;left&#39;], node[&#39;right&#39;] = terminal_node(left), terminal_node(right) return # process left child if len(left) &lt;= min_size: node[&#39;left&#39;] = terminal_node(left) else: node[&#39;left&#39;] = get_split(left) split(node[&#39;left&#39;], max_depth, min_size, depth+1) # process right child if len(right) &lt;= min_size: node[&#39;right&#39;] = terminal_node(right) else: node[&#39;right&#39;] = get_split(right) split(node[&#39;right&#39;], max_depth, min_size, depth+1) . def build_tree(train, max_depth, min_size): root = get_split(train) split(root, max_depth, min_size, 1) return root . def print_tree(node, depth=0): if isinstance(node, dict): print(&#39;%s[X%d &lt; %.3f]&#39; % ((depth*&#39; &#39;, (node[&#39;index&#39;]+1), node[&#39;value&#39;]))) print_tree(node[&#39;left&#39;], depth+1) print_tree(node[&#39;right&#39;], depth+1) else: print(&#39;%s[%s]&#39; % ((depth*&#39; &#39;, node))) . tree = build_tree(dataset, 1, 1) tree . {&#39;index&#39;: 0, &#39;value&#39;: 6.642287351, &#39;left&#39;: 0, &#39;right&#39;: 1} .",
            "url": "https://polymenis.xyz/notebooks/machine-learning/jupyter/2022/04/29/decision-trees.html",
            "relUrl": "/machine-learning/jupyter/2022/04/29/decision-trees.html",
            "date": " • Apr 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "A k means clustering note",
            "content": "k means clustering . K-means clustering is an unsupervised learning algorithm which means that there are no labeled data to train on. The algorithm perform clustering on similar data and creates clusters with that data. The data points can only belong in one group or cluster and not into multiple clusters. The K term represents the number of the clusters in the given dateset. For example, if $K=2$ this means that in the given dataset there are 2 clusters. Thus, the $KMean$ algorithm tries to create clusters as homogeneous as possible and at the same time to differentiate one cluster from one another, where it achieves it by keeping the clusters as far as possible. . . References .",
            "url": "https://polymenis.xyz/notebooks/markdown/2022/04/28/Kmeans-clustering.html",
            "relUrl": "/markdown/2022/04/28/Kmeans-clustering.html",
            "date": " • Apr 28, 2022"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://polymenis.xyz/notebooks/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://polymenis.xyz/notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Home",
          "content": "",
          "url": "https://polymenis.xyz/notebooks/home/",
          "relUrl": "/home/",
          "date": ""
      }
      
  

  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "",
          "url": "https://polymenis.xyz/notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "{“/home/”:”https://ipolymenis.xyz/”,”/about/”:”https://ipolymenis.xyz/bio.html”} .",
          "url": "https://polymenis.xyz/notebooks/redirects.json",
          "relUrl": "/redirects.json",
          "date": ""
      }
      
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://polymenis.xyz/notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}